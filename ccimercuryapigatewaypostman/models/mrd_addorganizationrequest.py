# -*- coding: utf-8 -*-

"""
ccimercuryapigatewaypostman

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class MrdAddorganizationrequest(object):

    """Implementation of the '/mrd/addorganizationrequest' model.

    TODO: type model description here.

    Attributes:
        org_id (str): TODO: type description here.
        org_cd (str): TODO: type description here.
        org_name (str): TODO: type description here.
        curr_flag (str): TODO: type description here.
        d_a_flag (str): TODO: type description here.
        created_by (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "org_id": 'orgId',
        "org_cd": 'orgCd',
        "org_name": 'orgName',
        "curr_flag": 'currFlag',
        "d_a_flag": 'dAFlag',
        "created_by": 'createdBy'
    }

    def __init__(self,
                 org_id=None,
                 org_cd=None,
                 org_name=None,
                 curr_flag=None,
                 d_a_flag=None,
                 created_by=None):
        """Constructor for the MrdAddorganizationrequest class"""

        # Initialize members of the class
        self.org_id = org_id 
        self.org_cd = org_cd 
        self.org_name = org_name 
        self.curr_flag = curr_flag 
        self.d_a_flag = d_a_flag 
        self.created_by = created_by 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        org_id = dictionary.get("orgId") if dictionary.get("orgId") else None
        org_cd = dictionary.get("orgCd") if dictionary.get("orgCd") else None
        org_name = dictionary.get("orgName") if dictionary.get("orgName") else None
        curr_flag = dictionary.get("currFlag") if dictionary.get("currFlag") else None
        d_a_flag = dictionary.get("dAFlag") if dictionary.get("dAFlag") else None
        created_by = dictionary.get("createdBy") if dictionary.get("createdBy") else None
        # Return an object of this model
        return cls(org_id,
                   org_cd,
                   org_name,
                   curr_flag,
                   d_a_flag,
                   created_by)
