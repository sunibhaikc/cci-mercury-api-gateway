# -*- coding: utf-8 -*-

"""
ccimercuryapigatewaypostman

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class MrdEditmercuryliterequest(object):

    """Implementation of the '/mrd/editmercuryliterequest' model.

    TODO: type model description here.

    Attributes:
        viewname (str): TODO: type description here.
        view_id (str): TODO: type description here.
        temp_id (str): TODO: type description here.
        updated_by (str): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "viewname": 'Viewname',
        "view_id": 'ViewId',
        "temp_id": 'tempId',
        "updated_by": 'updatedBy'
    }

    def __init__(self,
                 viewname=None,
                 view_id=None,
                 temp_id=None,
                 updated_by=None):
        """Constructor for the MrdEditmercuryliterequest class"""

        # Initialize members of the class
        self.viewname = viewname 
        self.view_id = view_id 
        self.temp_id = temp_id 
        self.updated_by = updated_by 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        viewname = dictionary.get("Viewname") if dictionary.get("Viewname") else None
        view_id = dictionary.get("ViewId") if dictionary.get("ViewId") else None
        temp_id = dictionary.get("tempId") if dictionary.get("tempId") else None
        updated_by = dictionary.get("updatedBy") if dictionary.get("updatedBy") else None
        # Return an object of this model
        return cls(viewname,
                   view_id,
                   temp_id,
                   updated_by)
