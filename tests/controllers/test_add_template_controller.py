# -*- coding: utf-8 -*-

"""
ccimercuryapigatewaypostman

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from ccimercuryapigatewaypostman.api_helper import APIHelper
from ccimercuryapigatewaypostman.models.template_filter_add_template_request import TemplateFilterAddTemplateRequest


class AddTemplateControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(AddTemplateControllerTests, cls).setUpClass()
        cls.controller = cls.client.add_template
        cls.response_catcher = cls.controller.http_call_back

    # Todo: Add description for test test_template_filter_add_template
    def test_template_filter_add_template(self):
        # Parameters for the API call
        accept = 'application/json'
        body = APIHelper.json_deserialize('{"userId":"C36701","tempName":"Templatefilter","orgIds":"0","orgDe'
            'sc":"ALL","lobIds":"0","lobDesc":"ALL","slobIds":"0","slobDesc":"A'
            'LL","fgIds":"0","fgDesc":"ALL","sfgIds":"1501001,1500192,1501161,1'
            '500441,1501241,1500981,1501301,1501181,1501061,1500501","sfgDesc":'
            '"ASC,Abuse & Fraud,3rd Party Sales Support,Advanced Service Center'
            ',Advanced Convention Services - Service Desk,Agency Recovery Manag'
            'ement,CB Fulfillment,CB Access Transport Tech,Bulk Owner Support,C'
            'B Network Provisioning","funcIds":"1600429,1600427,1613419,1631354'
            ',1610793","funcDesc":"Accessibility Tech,Accessibility Billing,Age'
            'ncy Recovery Management,Agent Transfer Comm Center Missed Go Back,'
            'Alarm.com","lngIds":"1100024,1249,1100026,1045,1100045,1182,110002'
            '1,1003,1100028","lngDesc":"Bravvo,Bhojpuri1,Bangla,Lang,Karanjohar'
            ',KILKI1,English,French,INDIA","custRegIds":"0","custRegDesc":"ALL"'
            ',"coeIds":"0","coeDesc":"ALL"}', TemplateFilterAddTemplateRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.template_filter_add_template(accept, body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = None

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Todo: Add description for test test_template_filter_add_template_1
    def test_template_filter_add_template_1(self):
        # Parameters for the API call
        accept = 'application/json'

        # Perform the API call through the SDK function
        result = self.controller.template_filter_add_template_1(accept)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = None
        expected_headers['access-control-allow-origin'] = None
        expected_headers['access-control-allow-methods'] = None
        expected_headers['access-control-allow-headers'] = None

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

